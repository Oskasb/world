[
  {
    "SHADER_PROGRAMS": {
      "TERRAIN_SHADER":{
        "vertexTerrainInstancing": [

          "precision highp float;",
          "uniform sampler2D heightmap;",
          "uniform sampler2D terrainmap;",
          "uniform mat4 modelViewMatrix;",
          "uniform mat4 projectionMatrix;",

          "attribute vec4 texelRowSelect;",
          "attribute vec4 lifecycle;",
          "attribute vec4 orientation;",
          "attribute vec4 vertexColor;",
          "attribute vec3 position;",
          "attribute vec3 normal;",
          "attribute vec3 offset;",
          "attribute vec3 scale3d;",
          "attribute vec2 uv;",
          "attribute vec4 sprite;",

          "uniform vec3 heightmaptiles;",

          "varying vec4 vColor;",
          "varying vec2 vUv;",
          "varying vec2 heightSampler;",

          "uniform vec3 ambientLightColor;",
          "uniform vec3 sunLightColor;",

          "uniform vec3 sunLightDirection;",
          "varying vec3 sunDir;",

          "uniform vec3 fogColor;",
          "uniform float fogDensity;",
          "varying float fogDepth;",
          "varying float vFragDepth;",
          "varying vec3 vPosition;",
          "varying vec3 vNormal;",
          "varying vec3 faceNormal;",
          "varying vec2 tileOffset;",
          "varying vec2 tileScale;",
          "varying vec3 terrainPosition;",
          "void main(){",

          "vPosition = position;",
          "terrainPosition = position;",
          "float txw = heightmaptiles.z;",
          "float txPointOffset = 1.0/txw;",
          "float shift = txPointOffset * 1.0;",
          "vec4 quat = orientation.xyzw;",

          "vUv = uv;",

          "tileScale = 1.0/heightmaptiles.xy;",

          "tileOffset = vec2(sprite.x * tileScale.x + txPointOffset*0.5, sprite.y * tileScale.y + txPointOffset*0.5);",

          "vec2 scaledVPos = vec2(position.x*0.5 + 0.5, position.z *0.5 + 0.5)*tileScale;",

          "heightSampler = (scaledVPos + tileOffset);",

          "vec4 sample = texture2D( heightmap, heightSampler);",

          "vec2 normalSamplerP0 = vec2(heightSampler.x +shift*0.5 , heightSampler.y +shift*0.5);",
          "vec4 normalSampleP0 = texture2D( heightmap, normalSamplerP0);",

          "vec2 normalSamplerP1 = vec2(normalSamplerP0.x - shift, normalSamplerP0.y);",
          "vec4 normalSampleP1 = texture2D( heightmap, normalSamplerP1);",

          "vec2 normalSamplerP2 = vec2(normalSamplerP0.x, normalSamplerP0.y - shift);",
          "vec4 normalSampleP2 = texture2D( heightmap, normalSamplerP2);",

          "vec3 triPoint0 = vec3( normalSamplerP0.x, normalSampleP0.x*0.01, normalSamplerP0.y);",
          "vec3 triPoint1 = vec3( normalSamplerP1.x, normalSampleP1.x*0.01, normalSamplerP1.y);",
          "vec3 triPoint2 = vec3( normalSamplerP2.x, normalSampleP2.x*0.01, normalSamplerP2.y);",

          "vec3 tangent = triPoint2 - triPoint0;",
          "vec3 biTangent = triPoint1 - triPoint0;",

          "vPosition.x = vPosition.x *  scale3d.x;",
          "vPosition.y = sample.x*100.0*scale3d.y + vPosition.y *  scale3d.y * 20.0;",
          "vPosition.z = vPosition.z *  scale3d.z;"  ,



          "vNormal = normalize(cross(tangent, biTangent));",
          "faceNormal = vNormal + 2.0 * cross( orientation.xyz, cross( orientation.xyz, vNormal ) + orientation.w * vNormal );",

          "float intensity = max( 0.4 + dot(faceNormal, sunLightDirection ) * 0.5, 0.0);",
          "sunDir = sunLightColor * intensity * (0.3+intensity*intensity*0.3);",

          "float ambIntensity = 0.75;",

          "vColor.r = sunDir.r + ambientLightColor.r * ambIntensity ;",
          "vColor.g = sunDir.g + ambientLightColor.g * ambIntensity;",
          "vColor.b = sunDir.b + ambientLightColor.b * ambIntensity;",
          "vColor.a = 1.0;",

          "gl_Position = projectionMatrix * modelViewMatrix * vec4( offset + vPosition, 1.0 );",
          "fogDepth = gl_Position.z*1.0;",
          "}",
          ""
        ],

        "skip": [
          "slope = slope * 0.98 + 0.02*sin(vPosition.x * twoPi*2.0)  + 0.03*cos(vPosition.z * twoPi*2.0);",
          "slope = slope * 0.95 + 0.05*sin(vPosition.x * twoPi*0.5)  + 0.05*cos(vPosition.z * twoPi*0.5);",
          "slope = slope * 0.97 + 0.03*sin(vPosition.x * twoPi*1.0)  + 0.05*cos(vPosition.z * twoPi*1.0);",

          "slope = slope * 0.9998 + 0.0002*sin(vPosition.x * twoPi*2.0)  + 0.0002*cos(vPosition.z * twoPi*2.0);",
          "slope = slope * 0.9995 + 0.0005*sin(vPosition.x * twoPi*0.5)  + 0.0005*cos(vPosition.z * twoPi*0.25);",
          "slope = slope * 0.9997 + 0.0003*sin(vPosition.x * twoPi*2.0)  + 0.0003*cos(vPosition.z * twoPi*1.0);"
        ],

        "fragmentTerrainInstancing":[
          "precision highp float;",

          "uniform vec3 sunLightDirection;",
          "uniform vec3 fogColor;",
          "uniform float fogDensity;",
          "uniform sampler2D terrainmap;",
          "uniform sampler2D tx0;",
          "uniform sampler2D tx0nm;",
          "uniform sampler2D tx1;",
          "uniform vec2 tx0tiles;",
          "varying vec2 vUv;",
          "varying vec3 sunDir;",
          "varying float fogDepth;",
          "varying float vFragDepth;",
          "varying vec4 vColor;",
          "varying vec3 vPosition;",
          "varying vec3 vNormal;",
          "varying vec3 faceNormal;",
          "varying vec2 tileOffset;",
          "varying vec2 tileScale;",
          "varying vec3 terrainPosition;",
          "void main(){",

          "float tileCount = 16.0;",
          "float tileXuv = max(0.001, min(vUv.x*1.0, 0.9999)) * tileCount;",
          "float tileYuv = max(0.001, min(vUv.y*1.0, 0.9999)) * tileCount;",
          "float uvX = tileXuv * 1.0 - floor(tileXuv * 1.0)*0.9999;",
          "float uvY = tileYuv * 1.0 - floor(tileYuv * 1.0)*0.9999;",
          "vec2 tileUv = vec2(0.005 + uvX*0.990, 0.005 + uvY*0.990);",

          "vec2 scaledVPos = vec2(terrainPosition.x*0.5 + 0.5, terrainPosition.z *0.5 + 0.5)*tileScale;",

          "vec2 terrainSampler = (scaledVPos + tileOffset);",

          "vec4 terrainMapSample = texture2D( terrainmap, terrainSampler);",

          "float twoPi = 6.2831;",
          "float slope = 1.0-vNormal.y;",

          "slope = slope * 0.998 + 0.10*slope*sin(vPosition.x * twoPi*0.25)  + 0.22*slope*cos(vPosition.z * twoPi*1.0);",
          "slope = slope * 0.998 + 0.14*slope*sin(vPosition.x * twoPi*0.25)  + 0.08*slope*cos(vPosition.z * twoPi*0.125);",
          "slope = slope * 0.998 + 0.08*slope*sin(vPosition.x * twoPi*1.0)   + 0.14*slope*cos(vPosition.z * twoPi*0.5);",

          "vec4 sprite = vec4(0.0, 8.0, 1.0, 1.0);",
          "vec2 tileScale = 1.0/tx0tiles;",
          "tileScale.y /= sprite.z;",
          "vec2 scaledUv = tileUv*tileScale;",
          "scaledUv.y /= sprite.z;",

          "float smoothFactor  = 0.0;",
          "float sampleBlue = terrainMapSample.b;",
          "float sampleGreen = terrainMapSample.g;",

          "float rockRow = 1.0;",

          "float slopeScale = 0.98;",


          "float natureRow = 2.0;",
          "float natureStep = 0.07;",

          "float scatter = (cos(vPosition.z*113.0) + sin(vPosition.x*113.0))*0.002 + (cos(vPosition.z*25.0) + sin(vPosition.x*25.0))*0.002;",

          "vec2 tile01 = vec2(min(floor((sampleGreen+scatter) * 10.0), 7.0), natureRow);",
          "vec2 tile01Offset = vec2(tile01.x * tileScale.x, (tile01.y-sprite.w) * tileScale.y / sprite.z);",
          "vec2 tile01Uv = vec2(scaledUv + tile01Offset);",
          "smoothFactor = smoothstep(-0.01, natureStep*0.5, sampleGreen) - smoothstep(natureStep*2.0, natureStep*3.0, sampleGreen);",
          "vec4 natureColor = texture2D(tx0, tile01Uv);",
          "vec4 natureNormal = texture2D(tx0nm, tile01Uv);",

          "float natureMix = min(max(-natureStep*1.2 + sampleGreen, 0.0)/natureStep*1.0, 1.0);",

          "vec2 tileSlopeMod = vec2(min(floor(max(sqrt(slope -0.01) +scatter*4.0, 0.01) * 10.0), 7.0), rockRow);",
          "vec2 tileSlopeModOffset = vec2(tileSlopeMod.x * tileScale.x, (tileSlopeMod.y-sprite.w) * tileScale.y / sprite.z);",
          "vec2 tileSlopeModUv = vec2(scaledUv + tileSlopeModOffset);",
          "vec4 txColorSlopeMod01 = texture2D( tx0, tileSlopeModUv);",
          "vec4 txNmSlopeMod01 = texture2D( tx0nm, tileSlopeModUv);",
          "vec4 txColorBase = txColorSlopeMod01;",
          "vec4 txNmBase =  txNmSlopeMod01;",

          "txColorBase = mix( txColorBase, natureColor,  natureMix);",
          "txNmBase = mix( txNmBase, natureNormal,  natureMix);",

          "float civRow = 3.0;",
          "float civStep = 0.07;",

          "tile01 = vec2(min(floor((sampleBlue+scatter*8.0) * 10.0), 7.0), civRow);",
          "tile01Offset = vec2(tile01.x * tileScale.x, (tile01.y-sprite.w) * tileScale.y / sprite.z);",
          "tile01Uv = vec2(scaledUv + tile01Offset);",
          "smoothFactor = smoothstep(-0.01, civStep*0.9, sampleBlue) - smoothstep(civStep*1.5, civStep*2.2, sampleBlue);",
          "vec4 civColor = texture2D(tx0, tile01Uv);",
          "vec4 civNormal = texture2D(tx0nm, tile01Uv);",

          "float civMix = min(max(-civStep*1.2 + sampleBlue, 0.0)/civStep*1.0, 1.0);",
          "txColorBase = mix(txColorBase, civColor,  civMix);",
          "txNmBase = mix(txNmBase, civNormal,  civMix);",

          "vec4 txColor = txColorBase;",

          "txColor.r += vNormal.x * 0.0 + tileUv.x *0.0;",
          "txColor.g += vNormal.y * 0.0 + tileUv.y *0.0;",
          "txColor.b += vNormal.z * 0.0;",
        "vec4 lightColor = vec4(sunDir, 1.0);",
        "float intensity = max( 0.01 + dot(txNmBase.rgb, sunLightDirection ) * 0.99, 0.0);",
        "gl_FragColor = vColor * txColor * (intensity*0.25 + 0.75) + txColor * lightColor*intensity*2.0;",
        "float fogFactor = min(fogDensity * fogDepth, 1.0);",
          "gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor,  fogFactor );",

          "}",
          ""

        ]
      }
    }
  }
]
